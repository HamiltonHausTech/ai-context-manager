name: Docker Build and Push

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  docker:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Verify build context
      run: |
        echo "Build context contents:"
        ls -la
        echo "Config file check:"
        ls -la config.toml || echo "config.toml not found"
        echo "Demo config check:"
        ls -la demo_apps/demo-config.toml || echo "demo-config.toml not found"

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ secrets.DOCKER_USERNAME }}/ai-context-manager
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./demo_apps/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1

    - name: Test Docker image
      if: github.event_name == 'pull_request'
      run: |
        docker run --rm ${{ steps.meta.outputs.tags }} python -c "import ai_context_manager; print('Docker image works!')"

  docker-compose:
    runs-on: ubuntu-latest
    needs: docker
    if: github.event_name != 'pull_request'
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Set up Docker Compose
      run: |
        # Install docker-compose
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose

    - name: Pull Docker image
      run: |
        docker pull ${{ secrets.DOCKER_USERNAME }}/ai-context-manager:latest

    - name: Test docker-compose setup
      run: |
        # Test that docker-compose configuration is valid
        docker-compose config
        echo "Docker Compose configuration is valid"

    - name: Build and test services
      run: |
        # Build services
        docker-compose build
        
        # Start PostgreSQL service
        docker-compose up -d postgres
        
        # Wait for PostgreSQL to be ready with more robust checking
        echo "Waiting for PostgreSQL to start..."
        timeout 120 bash -c 'until docker-compose exec -T postgres pg_isready -U postgres -d ai_context; do 
          echo "PostgreSQL not ready yet, waiting..."
          sleep 5
        done'
        
        # Verify PostgreSQL is actually running
        docker-compose exec -T postgres psql -U postgres -d ai_context -c "SELECT version();"
        
        # Test web demo
        docker-compose up -d web-demo
        
           # Wait for web demo to start and be healthy
           echo "Waiting for web demo to start..."
           timeout 120 bash -c 'until curl -f http://localhost:5000/health; do 
             echo "Web demo not healthy yet, waiting..."
             sleep 5
           done'
           
           # Test the main endpoint
           echo "Testing main endpoint..."
           curl -f http://localhost:5000/ || echo "Main endpoint test failed"
        
        echo "All services started successfully"
        
        # Show service status
        docker-compose ps
        
        # Clean up
        docker-compose down

  security-scan:
    runs-on: ubuntu-latest
    needs: docker
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata for security scan
      id: meta-scan
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ secrets.DOCKER_USERNAME }}/ai-context-manager
        tags: |
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Pull Docker image for security scan
      run: |
        echo "Pulling Docker image for security scan..."
        docker pull ${{ secrets.DOCKER_USERNAME }}/ai-context-manager:latest
        echo "Verifying image was pulled:"
        docker images | grep ai-context-manager || echo "No ai-context-manager images found"
        echo "All Docker images:"
        docker images

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ secrets.DOCKER_USERNAME }}/ai-context-manager:latest'
        format: 'sarif,table'
        output: 'trivy-results.sarif'
        ignore-unfixed: true

    - name: Display security scan results
      run: |
        echo "=== Security Scan Results ==="
        if [ -f "trivy-results.sarif" ]; then
          echo "SARIF file generated successfully"
          echo "File size: $(ls -lh trivy-results.sarif | awk '{print $5}')"
        else
          echo "No SARIF file found"
        fi

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && success()
      continue-on-error: true
      with:
        sarif_file: 'trivy-results.sarif'
