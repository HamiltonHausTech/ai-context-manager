name: Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v6
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip cache purge || true
        
        # Install with secure urllib3 version
        pip install --no-cache-dir -e .[all]
        pip install --no-cache-dir pytest pytest-cov pytest-asyncio
        
        # Verify urllib3 version
        pip show urllib3

    - name: Run linting
      run: |
        pip install flake8 black isort
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Check code formatting
      run: |
        # Black compatibility check - handle Python 3.8 gracefully
        if [[ "${{ matrix.python-version }}" != "3.8" ]]; then
          black --check . || (echo "Black formatting check failed, but continuing..." && exit 0)
        else
          echo "Skipping black formatting check for Python 3.8 due to compatibility issues"
        fi
        isort --check-only . || (echo "isort check failed, but continuing..." && exit 0)

    - name: Run tests
      run: |
        pytest tests/ -v --cov=ai_context_manager --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  test-demos:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        demo: ["research-assistant", "web-demo"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Verify file structure
      run: |
        echo "Current directory: $(pwd)"
        echo "Directory contents:"
        ls -la
        echo "Demo apps directory:"
        ls -la demo_apps/ || echo "demo_apps directory not found"
        echo "Requirements file check:"
        ls -la demo_apps/requirements.txt || echo "requirements.txt not found"

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[vector]
        
        # Check if demo requirements file exists and install if available
        if [ -f "demo_apps/requirements.txt" ]; then
          echo "Installing demo app requirements..."
          pip install -r demo_apps/requirements.txt
        else
          echo "Warning: demo_apps/requirements.txt not found, skipping demo dependencies"
        fi

    - name: Test research assistant demo
      if: matrix.demo == 'research-assistant'
      run: |
        # Test that the demo can be imported and basic functionality works
        python -c "
        import sys
        sys.path.insert(0, '.')
        from demo_apps.research_assistant.app import ResearchAssistant
        print('Research assistant demo imports successfully')
        "

    - name: Test web demo
      if: matrix.demo == 'web-demo'
      run: |
        # Copy config file for demo
        cp config.toml demo_apps/demo-config.toml || echo "Using existing demo config"
        
        # Test that the web demo can be imported
        python -c "
        import sys
        sys.path.insert(0, '.')
        from demo_apps.web_demo.app import app
        print('Web demo imports successfully')
        "

  test-imports:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v6
      with:
        python-version: ${{ matrix.python-version }}

    - name: Test basic imports
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -e .
        
        # Test core imports with better error handling
        python -c "
        try:
            import ai_context_manager
            print(f'[OK] Package imported - version: {ai_context_manager.__version__}')
        except Exception as e:
            print(f'[FAIL] Package import failed: {e}')
            exit(1)
        
        try:
            from ai_context_manager import ContextManager, Config, Feedback
            print('[OK] Core classes imported successfully')
        except Exception as e:
            print(f'[FAIL] Core class imports failed: {e}')
            exit(1)
        
        try:
            ctx = ContextManager()
            print('[OK] ContextManager instantiation successful')
        except Exception as e:
            print(f'[FAIL] ContextManager instantiation failed: {e}')
            exit(1)
        
        try:
            config = Config('config.toml')
            print('[OK] Config instantiation successful')
        except Exception as e:
            print(f'[FAIL] Config instantiation failed: {e}')
            exit(1)
        
        print('[SUCCESS] All basic imports and instantiations work!')
        "

    - name: Test vector imports (if available)
      run: |
        pip install -e .[vector]
        python -c "
        try:
            from ai_context_manager.store.vector_memory import VectorMemoryStore
            print('Vector imports successful')
        except ImportError as e:
            print(f'Vector imports not available: {e}')
        "

    - name: Test PostgreSQL imports (if available)
      run: |
        pip install -e .[postgres]
        python -c "
        try:
            from ai_context_manager.store.postgres_vector_memory import PostgreSQLVectorMemoryStore
            print('PostgreSQL imports successful')
        except ImportError as e:
            print(f'PostgreSQL imports not available: {e}')
        "

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Security scan with Safety
      run: |
        pip install -e .[all]
        safety check --json || echo "Safety check completed with warnings"

    - name: Security scan with Bandit
      run: |
        bandit -r ai_context_manager/ -f json -o bandit-report.json || true
        bandit -r ai_context_manager/

  formatting-check:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v6
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install formatting tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort

    - name: Check code formatting with Black
      run: |
        echo "Running Black formatting check on Python ${{ matrix.python-version }}"
        black --check . || echo "Black formatting issues found (non-blocking)"

    - name: Check import sorting with isort
      run: |
        echo "Running isort check on Python ${{ matrix.python-version }}"
        isort --check-only . || echo "isort issues found (non-blocking)"

  build-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: "3.11"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Check package
      run: twine check dist/*

    - name: Test package installation
      run: |
        pip install dist/*.whl
        python -c "import ai_context_manager; print('Built package works!')"
